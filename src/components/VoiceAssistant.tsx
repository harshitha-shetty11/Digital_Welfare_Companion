import React, { useState, useEffect, useRef } from 'react';
import { useVoiceRecognition } from '../hooks/useVoiceRecognition';
import { Language } from '../types';

interface VoiceAssistantProps {
  onUserInput: (text: string) => void;
  language: Language;
  isLoading: boolean;
}

const VoiceAssistant: React.FC<VoiceAssistantProps> = ({ 
  onUserInput, 
  language, 
  isLoading 
}) => {
  const [inputText, setInputText] = useState('');
  const [isListening, setIsListening] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);

  const {
    transcript,
    startListening,
    stopListening,
    resetTranscript,
    browserSupportsSpeechRecognition
  } = useVoiceRecognition(language);

  useEffect(() => {
    if (transcript) {
      setInputText(transcript);
    }
  }, [transcript]);

  const handleVoiceToggle = () => {
    if (isListening) {
      stopListening();
      setIsListening(false);
    } else {
      resetTranscript();
      startListening();
      setIsListening(true);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (inputText.trim() && !isLoading) {
      onUserInput(inputText.trim());
      setInputText('');
      resetTranscript();
    }
  };

  const getPlaceholder = () => {
    const placeholders: Record<Language, string> = {
      'en': 'Ask about government schemes...',
      'hi': 'рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ...',
      'ta': 'роЕро░роЪрпБ родро┐роЯрпНроЯроЩрпНроХро│рпИрокрпН рокро▒рпНро▒ро┐ роХрпЗро│рпБроЩрпНроХро│рпН...',
      'te': 'р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ер░бр░Чр░Вр░бр░┐...',
      'bn': 'рж╕рж░ржХрж╛рж░рж┐ ржкрзНрж░ржХрж▓рзНржк рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи...',
      'mr': 'рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдВрдмрджреНрджрд▓ рд╡рд┐рдЪрд╛рд░рд╛...',
      'gu': 'рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркУ ркмрк╛ркмркдрлЗ рккрлВркЫрлЛ...',
      'kn': 'р▓╕р▓░р│Нр▓Хр▓╛р▓░р▓┐ р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│ р▓мр▓Чр│Нр▓Чр│Ж р▓Хр│Зр▓│р▓┐...',
      'ml': 'р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝ р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛ р┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х...',
      'pa': 'ри╕ри░риХри╛ри░рйА рипрйЛриЬриири╛ри╡ри╛риВ римри╛ри░рйЗ рикрйБрй▒риЫрйЛ...',
      'or': 'рм╕рм░рмХрм╛рм░рнА рмпрнЛрмЬрмирм╛ рммрм┐рм╖рнЯрм░рнЗ рмкрнНрм░рм╢рнНрми рмХрм░рмирнНрмдрнБ...',
      'as': 'ржЪрж░ржХрж╛рж░рзА ржпрзЛржЬржирж╛рж░ ржмрж┐рж╖ржпрж╝рзЗ рж╕рзЛржзрж╛ ржХрж░ржХ...',
      'ur': '╪н┌й┘И┘Е╪к█М ╪з╪│┌й█М┘Е┘И┌║ ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ┘╛┘И┌Ж┌╛█М┌║...'
    };
    return placeholders[language] || placeholders['en'];
  };

  return (
    <div className="voice-assistant">
      <form onSubmit={handleSubmit} className="input-form">
        <div className="input-container">
          <input
            ref={inputRef}
            type="text"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            placeholder={getPlaceholder()}
            disabled={isLoading}
            className="text-input"
          />
          
          {browserSupportsSpeechRecognition && (
            <button
              type="button"
              onClick={handleVoiceToggle}
              disabled={isLoading}
              className={`voice-button ${isListening ? 'listening' : ''}`}
            >
              {isListening ? 'ЁЯФ┤' : 'ЁЯОд'}
            </button>
          )}
          
          <button
            type="submit"
            disabled={!inputText.trim() || isLoading}
            className="send-button"
          >
            {isLoading ? 'тП│' : 'ЁЯУд'}
          </button>
        </div>
      </form>

      {isListening && (
        <div className="listening-indicator">
          <div className="pulse"></div>
          <span>рд╕реБрди рд░рд╣рд╛ рд╣реВрдБ...</span>
        </div>
      )}
    </div>
  );
};

export default VoiceAssistant;
